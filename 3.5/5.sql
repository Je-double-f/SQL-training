WITH get_count_correct (st_n_c, count_correct) 
  AS (
    SELECT step_name, count(*)
      FROM step 
           INNER JOIN step_student USING (step_id)
     WHERE result = "correct"
     GROUP BY step_name
   ),
  get_count_wrong (st_n_w, count_wrong) 
  AS (
    SELECT step_name, count(*)
      FROM step 
           INNER JOIN step_student USING (step_id)
     WHERE result = "wrong"
     GROUP BY step_name
   )  
SELECT st_n_c AS Шаг,
       CASE
           WHEN count_wrong IS NULL THEN 100
           ELSE ROUND(count_correct / (count_correct + count_wrong) * 100)
        END AS Успешность
  FROM get_count_correct 
       LEFT JOIN get_count_wrong ON st_n_c = st_n_w
 UNION

SELECT st_n_w AS Шаг,
       CASE
           WHEN count_correct IS NULL THEN 0
           ELSE ROUND(count_correct / (count_correct + count_wrong) * 100)
        END AS Успешность
  FROM get_count_correct 
       RIGHT JOIN get_count_wrong ON st_n_c = st_n_w
 ORDER BY Успешность ASC, Шаг ASC;


 +--------------------------------------------------------------------------+------------+
| Шаг                                                                      | Успешность |
+--------------------------------------------------------------------------+------------+
| Задание. Работа с архивной таблицей, оператор UNION, часть 1             | 0          |
| Выборка данных, оператор LIKE                                            | 19         |
| Вложенные запросы в операторах соединения                                | 32         |
| Задание. Вывести самый популярный жанр                                   | 33         |
| Запросы для нескольких таблиц с группировкой                             | 33         |
| Задание. Вывести заказы, доставленные с опозданием                       | 35         |
| Задание. Вывести информацию о движении каждого заказа                    | 36         |
| Запросы для нескольких таблиц со вложенными запросами                    | 36         |
| Задание. Вывести подробную информацию о каждом заказе                    | 37         |
| Выборка данных, вычисляемые столбцы, логические функции                  | 44         |
| Операция соединение, использование USING()                               | 45         |
| Перекрестное соединение CROSS JOIN                                       | 45         |
| Задание. Вывести города, в которых живут клиенты магазина                | 48         |
| Задание. Посчитать, сколько раз была заказана каждая книга               | 48         |
| Запросы на основе трех и более связанных таблиц                          | 49         |
| Выборка данных с сортировкой                                             | 53         |
| Внешнее соединение LEFT и RIGHT OUTER JOIN                               | 55         |
| Запросы на выборку из нескольких таблиц                                  | 58         |
| Выборка данных, вычисляемые столбцы, математические функции              | 59         |
| Задание. Вывести клиентов, которые заказывали книги определенного автора | 63         |
| Задание. Вывести информацию об оплате каждого заказа                     | 65         |
| Выборка данных, логические операции                                      | 67         |
| Проектирование концептуальной модели базы данных                         | 70         |
| Выборка данных, операторы BETWEEN, IN                                    | 72         |
| Выборка данных с созданием вычисляемого столбца                          | 74         |
| Выборка отдельных столбцов                                               | 76         |
| Соединение INNER JOIN                                                    | 78         |
| Выборка данных по условию                                                | 81         |
| Выборка отдельных столбцов и присвоение им новых имен                    | 84         |
| Выборка всех данных из таблицы                                           | 87         |
| Задание. Работа с архивной таблицей, оператор UNION, часть 2             | 100        |
| Построение логической схемы базы данных                                  | 100        |
+--------------------------------------------------------------------------+------------+